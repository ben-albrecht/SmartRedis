name: run_tests

# run tests only when code is merged into develop/master
on: push

env:
  HOMEBREW_NO_ANALYTICS: "ON" # Make Homebrew installation a little quicker
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"
  SSDB: "127.0.0.1:7000,127.0.0.2:7001,127.0.0.3:7002"
  SMARTREDIS_TEST_CLUSTER: True
  TZ: "America/New_York" # for tzdata package
  DEBIAN_FRONTEND: "noninteractive" # disable interactive installs


jobs:


  # docker run --rm --name redisai -v $PWD/redis.conf:/data/redis.conf --entrypoint
  # "sh" redislabs/redisai:1.2.5-cpu-xenial -c "redis-server /data/redis.conf
  # --loadmodule /usr/lib/redis/modules/r edisai.so"
  run_tests:
    name: Run smartredis tests using ${{ matrix.os }}, Python ${{ matrix.py_v }}, RedisAI ${{ matrix.rai_v }}, and compiler ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04] # cannot test on macOS as docker isn't supported on Mac
        compiler: [9] # intel compiler, and versions of GNU compiler
        rai_v: [1.2.5] # verisons of RedisAI
        py_v: ['3.9.x'] # versions of Python
    env:
      FC: gfortran-${{ matrix.compiler }}
      GCC_V: ${{ matrix.compiler }} # used when the compiler is gcc/gfortran

    # Service containers to run with `container-job`
    #services:
    #  # Label used to access the service container
    #  redis-1:
    #    # Docker Hub image
    #    image: redislabs/redisai:${{ matrix.rai_v }}-cpu-xenial

    #    # Set health checks to wait until redis has started
    #    options: >-
    #      --entrypoint "sh"
    #      -c "redis-server /data/redis.conf --loadmodule /usr/lib/redis/modules/redisai.so"
    #      --health-cmd "redis-cli ping"
    #      --health-interval 10s
    #      --health-timeout 5s
    #      --health-retries 5

    #    # Copy cluster redis conf to default redis conf location
    #    volumes:
    #      - $PWD/redis.conf:/data/redis.conf

    #    ports:
    #      # map port 6379 on service container to the host
    #      - 6379:6379

    #  # Label used to access the service container
      #      redis-2:
      #        # Docker Hub image
      #        image: redislabs/redisai:${{ matrix.rai_v }}-cpu-xenial
      #
      #        # Set health checks to wait until redis has started
      #        options: >-
      #          --entrypoint "redis-server --loadmodule /usr/lib/redis/modules/redisai.so /usr/local/etc/redis/redis.conf"
      #          --health-cmd "redis-cli ping"
      #          --health-interval 10s
      #          --health-timeout 5s
      #          --health-retries 5
      #
      #        # Copy cluster redis conf to default redis conf location
      #        volumes:
      #          - redis.conf:/usr/local/etc/redis/redis.conf
      #
      #        ports:
      #          # map port 6379 on service container to the host
      #          - 6380:6380
      #
      #      # Label used to access the service container
      #      redis-3:
      #        # Docker Hub image
      #        image: redislabs/redisai:${{ matrix.rai_v }}-cpu-xenial
      #
      #        # Set health checks to wait until redis has started
      #        options: >-
      #          --entrypoint "redis-server --loadmodule /usr/lib/redis/modules/redisai.so /usr/local/etc/redis/redis.conf"
      #          --health-cmd "redis-cli ping"
      #          --health-interval 10s
      #          --health-timeout 5s
      #          --health-retries 5
      #
      #        # Copy cluster redis conf to default redis conf location
      #        volumes:
      #          - redis.conf:/usr/local/etc/redis/redis.conf
      #
      #        ports:
      #          # map port 6379 on service container to the host
      #          - 6381:6381

    # Run all of steps inside of a container so that it is on the same network
    # as service nodes rather than host
    #container: ubuntu:20.04
    steps:

      # download a copy of SmartRedis before running CI tests
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py_v }}

      - name: Install utility software
        run: |
          sudo apt update && sudo apt-get -y install curl gnupg lsb-release software-properties-common ca-certificates && \
          # Add latest redis to apt sources
          echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list && \
          curl -fsSL https://packages.redis.io/gpg | gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg && \
          # Add latest docker to apt sources
          echo  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
          sudo apt update && \
          sudo apt-get -y install iputils-ping docker-ce docker-ce-cli containerd.io redis-server

      # Grab pre-built redisai.so
      - name: Download redisai.so
        run: |
          docker create --name redisai --rm redislabs/redisai:1.2.5-cpu-bionic && \
          docker cp redisai:/usr/lib/redis/modules/redisai.so $HOME && ls -la $HOME

          # - name: Start redis cluster
          #   run:

          # docker run --rm --name redis-1 --network ${{ job.container.network }} \
          # --network-alias redis-1 -p 6379:6379 -v $PWD/redis.conf:/data/redis.conf \
          # redislabs/redisai:1.2.5-cpu-xenial redis-server /data/redis.conf \
          # --loadmodule /usr/lib/redis/modules/redisai.so &

          #- name: Setup redis cluster
          #  run: echo $(echo $SSDB | tr "," " ") && ping 172.19.0.2:6379 &&

      - name: Install GFortran Linux
        if: "!contains( matrix.compiler, 'intel' )" # if using GNU compiler
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test &&
          sudo apt update &&
          sudo apt install -y gcc-${GCC_V} gfortran-${GCC_V} &&
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V}


      - name: Install CMake
        run: sudo apt-get install -y cmake



            #- name: Install Intel compiler
            #  if: "contains( matrix.compiler, 'intel' )" # if using intel compiler
            #  run: |
            #    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB &&
            #    sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB &&
            #    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB &&
            #    echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list &&
            #    sudo apt-get update &&
            #    sudo apt-get install intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
            #    source /opt/intel/oneapi/setvars.sh &&
            #    printenv >> $GITHUB_ENV &&
            #    echo "CC=icc" >> $GITHUB_ENV &&
            #    echo "CXX=icpc" >> $GITHUB_ENV &&
            #    echo "FC=ifort" >> $GITHUB_ENV

          #- name: Install Cmake Linux
          #  if: contains(matrix.os, 'ubuntu')
          #  run: sudo apt-get install cmake

      - name: Build SmartRedis python and install
        run: python -m pip install -e .[dev]

      - name: Build and run tests
        run: |
          redis-server --port 7000 --cluster-enabled yes --cluster-config-file 7000.conf --protected-mode no --loadmodule $HOME/redisai.so &
          redis-server --port 7001 --cluster-enabled yes --cluster-config-file 7001.conf --protected-mode no --loadmodule $HOME/redisai.so &
          redis-server --port 7002 --cluster-enabled yes --cluster-config-file 7002.conf --protected-mode no --loadmodule $HOME/redisai.so &
          sleep 10 && jobs &&
          redis-cli --cluster create $(echo $SSDB | tr "," " ") --cluster-yes &&
          mkdir -p ./third-party &&
          make test-py
            #cd ./third-party &&
            #bash ../build-scripts/build-lcov.sh &&
            #bash ../build-scripts/build-catch.sh &&
            #cd ../ &&

            # - name: Run Python coverage tests
            #   run: python -m pytest --cov=./src/python/module/smartredis/ --cov-report=xml --cov-append -vv ./tests/python/

            # - name: Run C++ coverage tests # unit tests already built
            #   run: bash ./build-scripts/build_cpp_cov.sh

            # - name: Upload Python coverage to Codecov
            #   uses: codecov/codecov-action@v2
            #   with:
            #     files: ./coverage.xml

            # - name: Upload C++ coverage to Codecov
            #   uses: codecov/codecov-action@v2
            #   with:
            #     files: ./tests/cpp/unit-tests/build/CMakeFiles/cpp_unit_tests.dir/coverage.info
